{{#> layout}}
    <div id="container" class='px-20 py-10'>
        <a href="/" class="mb-4 block">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12.5 16.5999L7.06667 11.1666C6.425 10.5249 6.425 9.4749 7.06667 8.83324L12.5 3.3999" stroke="#292D32" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </a>
        <div class='flex flex-row items-center gap-2 mb-6'>
            <div
                id='node-status-background'
                class='h-3.5 w-3.5 rounded-full bg-emerald-200 grid place-items-center'
            >
                <div
                    id='node-status'
                    class='w-2 h-2 rounded-full bg-emerald-500'
                ></div>
            </div>
            <h1 id='node-name' class='text-xl text-gray-800 capitalize'></h1>
        </div>
        <div>
            <div class='flex flex-row items-center mt-4 mb-2'>
                <h2 class='text-lg font-medium text-gray-600'>Motor</h2>
                <div class='ml-2' id='motor-status'>🔴</div>
            </div>
            <button onclick="clockwise()" class='px-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11'>Sentido Agujas Del Reloj</button>
            <button onclick="anticlockwise()" class='px-4 ml-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11'>Sentido Contrario Agujas Del Reloj</button>
            <button onclick="stopMotor()" class='px-4 ml-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11'>Parar Motor</button>
        </div>
        <div class="mt-6">
            <h2 class='mb-2 text-lg font-medium text-gray-600'>Medición:</h2>
            <button id="measure-btn" class="px-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11">Empezar Medición</button>
        </div>
        <h2 class='mt-6 mb-2 text-lg font-medium text-gray-600'>Gráfico:</h2>
        <div id='lwc'></div>
    </div>
    <script src="https://unpkg.com/lightweight-charts@3.4.0/dist/lightweight-charts.standalone.production.js"></script>
    <script>
        const socket = new WebSocket('ws://localhost:4200')
        
        const node_name = window.location.pathname.replace('/node/', '')
        const nodeNameH1 = document.getElementById('node-name')
        nodeNameH1.innerText = node_name

        const nodeStatusBackground = document.getElementById('node-status-background')
        const nodeStatusPoint = document.getElementById('node-status')
        const motorStatus = document.getElementById('motor-status')
        const lwc = document.getElementById('lwc')
        const measureBtn = document.getElementById('measure-btn')

        let isMotorStopped = false
        let nodeStatus = true
        let isMeasureActive = false
        const toolTipWidth = 80
        const toolTipHeight = 80
        const toolTipMargin = 15

        const chart = LightweightCharts.createChart(lwc, {
            height: 400,
            layout: {
            	textColor: '#d1d4dc',
            	backgroundColor: '#00000000'
            },
            rightPriceScale: {
            	scaleMargins: {
            		top: 0.3,
            		bottom: 0.25,
            	},
            },
            crosshair: {
            	vertLine: {
            		width: 5,
            		color: 'rgba(224, 227, 235, 0.1)',
            		style: 0,
            	},
            	horzLine: {
            		visible: false,
            		labelVisible: false,
            	},
            },
            grid: {
            	vertLines: {
            		color: 'rgba(42, 46, 57, 0)',
            	},
            	horzLines: {
            		color: 'rgba(42, 46, 57, 0)',
            	},
            },
        }) 

        const areaChart = chart.addAreaSeries({
            topColor: 'rgba(38, 198, 218, 0.56)',
            bottomColor: 'rgba(38, 198, 218, 0.04)',
            lineColor: 'rgba(38, 198, 218, 1)',
            lineWidth: 2,
            crossHairMarkerVisible: false,
        })

        areaChart.setData([])

        const toolTip = document.createElement('div')
        toolTip.style = `width: 96px; height: 80px; position: absolute; display: none; padding: 8px; box-sizing: border-box; font-size: 12px; text-align: left; z-index: 1000; top: 12px; left: 12px; pointer-events: none; border: 1px solid; border-radius: 2px;font-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;`
        toolTip.style.background = 'rgba(38, 198, 218, 0.2)'
        toolTip.style.color = 'black'
        // toolTip.style.borderColor = '#eb4034'
        toolTip.style.borderColor = 'rgba(38, 198, 218, 1)'
        lwc.appendChild(toolTip)

        let startTime = null

        chart.subscribeCrosshairMove(param => {
            if (
                param.point === undefined ||
                !param.time ||
                param.point.x < 0 ||
                param.point.x > lwc.clientWidth ||
                param.point.y < 0 ||
                param.point.y > lwc.clientHeight
            ) {
                toolTip.style.display = 'none'
            } else {
                const dateStr = param.time
                if (!startTime) {
                    startTime = dateStr
                }
                const time = dateStr - startTime
                const seconds = Math.floor(time / 1000)
                const minutes = Math.floor(seconds / 60)

                const timeToShow = seconds < 60 ? `${seconds} sec` : `${minutes} min`

                toolTip.style.display = 'block'
                const value = param.seriesPrices.get(areaChart)
                toolTip.innerHTML = `<div style="color: ${'rgba(255, 82, 82, 1)'}">${'A0'}</div><div style="font-size: 24px; margin: 0px; color: ${'black'}">
                    ${value}
                    </div><div style="color: ${'black'}">
                    ${timeToShow}
                    </div>`

                const y = param.point.y + 272 // 272 is the offset of the chart
                let left = param.point.x + toolTipMargin
                if (left > lwc.clientWidth - toolTipWidth) {
                    left = param.point.x - toolTipMargin - toolTipWidth
                }

                let top
                // if (top - 272 > lwc.clientHeight - toolTipHeight) {
                //     top = y - toolTipHeight - toolTipMargin
                // }

                // console.log(y)
                // console.log(lwc.clientHeight - toolTipHeight)

                top = y - toolTipHeight - toolTipMargin
                toolTip.style.left = left + 'px'
                toolTip.style.top = top + 'px'
            }
        })

        socket.onopen = () => {
            console.log('🎉 WS Connected')
        }

        socket.onmessage = (e) => {
            const event = e.data.split(':')[0]
            const data = e.data.split(':')[1]
            const payload = e.data.substring(event.length + data.length + 2)

            if (event === 'type') {
                socket.send('type:client')
            }

            if (event === 'client') {
                const subevent = data
                if (subevent === 'status') {
                    const parsed = JSON.parse(payload)
                    if (Array.isArray(parsed)) {
                        parsed.forEach(node => {
                            // '🟢' : '🔴'
                            if (node.nodeName === node_name) {
                                nodeStatus = node.status
                                nodeStatusBackground.classList.remove('bg-red-200')
                                nodeStatusBackground.classList.remove('bg-emerald-200')
                                nodeStatusBackground.classList.add(`bg-${node.status ? 'emerald' : 'red'}-200`)
                                nodeStatusPoint.classList.remove('bg-red-500')
                                nodeStatusPoint.classList.remove('bg-emerald-500')
                                nodeStatusPoint.classList.add(`bg-${node.status ? 'emerald' : 'red'}-500`)
                            }
                        })
                    }
                }

                if (subevent === 'continuous-data') {
                    const analogValue = payload.split('/')[0]
                    const socket_id = payload.split('/')[1]
                    const value = parseFloat(analogValue)
                    if (!isNaN(value) && socket_id === node_name) {
                        areaChart.update({
                            time: new Date().getTime(),
                            value: value
                        })
                    }
                }
            }
        }

        const clockwise = () => {
            isMotorStopped = false
            socket.send(`direction:clockwise:${node_name}`)
            motorStatus.innerHTML = `🟢`
        }

        const anticlockwise = () => {
            isMotorStopped = false
            socket.send(`direction:anticlockwise:${node_name}`)
            motorStatus.innerHTML = `🟢`
        }

        const stopMotor = () => {
            isMotorStopped = true
            socket.send(`stop-motor:true:${node_name}`)
            motorStatus.innerHTML = `🔴`
        }

        measureBtn.addEventListener('click', () => {
            if (!isMeasureActive) {
                socket.send(`measure:true:${node_name}`)
                isMeasureActive = true
                measureBtn.innerHTML = 'Parar Medición'
            } else {
                socket.send(`measure:false:${node_name}`)
                isMeasureActive = false
                measureBtn.innerHTML = 'Empezar Medición'
            }
        })
    </script>
{{/layout}}
