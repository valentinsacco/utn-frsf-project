{{#> layout}}
    <div id="container" class='p-5 md:px-20 md:py-10'>
        <div id="alert" class="hidden p-4 mb-4 text-sm text-red-800 rounded-lg bg-red-100" role="alert">
            <span class="font-semibold">Alerta!</span> Conexion perdida con el servidor.
            <br/>
            <span>Por favor recargue la p√°gina</span>
        </div>
        <a href="/" class="mb-4 block">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12.5 16.5999L7.06667 11.1666C6.425 10.5249 6.425 9.4749 7.06667 8.83324L12.5 3.3999" stroke="#292D32" stroke-width="1.5" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </a>
        <div class='flex flex-row items-center gap-2 mb-6'>
            <div
                id='node-status-background'
                class='h-3.5 w-3.5 rounded-full bg-emerald-200 grid place-items-center'
            >
                <div
                    id='node-status'
                    class='w-2 h-2 rounded-full bg-emerald-500'
                ></div>
            </div>
            <h1 id='node-name' class='text-xl text-gray-800 capitalize'></h1>
        </div>
        <div class='mt-4 px-4 mb-4'>
            <h2 class='mb-2 text-lg font-medium text-gray-600'>Medici√≥n:</h2>
            <button id="measure-btn" class="px-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11">Empezar Medici√≥n</button>
        </div>
        <div class='border-t border-slate-400/20 mb-4 px-4'>
            <div class='flex flex-row items-center mt-4 mb-2'>
                <h2 class='text-lg font-medium text-gray-600'>Motor</h2>
                <div
                    id='motor-status-background'
                    class='ml-2 h-3.5 w-3.5 rounded-full bg-red-200 grid place-items-center'
                >
                    <div
                        id='motor-status'
                        class='w-2 h-2 rounded-full bg-red-500'
                    ></div>
                </div>
            </div>
            <div class="flex flex-row gap-2 mb-4">
                <span class="ms-3 text-sm font-medium text-gray-900">Apagado</span>
                <label class="relative inline-flex items-center cursor-pointer ml-1.5">
                    <input id="start-motor-btn" type="checkbox" value="" class="sr-only peer" onchange="handleStartToggle(event)">
                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-emerald-500"></div>
                </label>
                <span class="text-sm font-medium text-gray-900">Encendido</span>
            </div>
            <div class="flex flex-row gap-2 mb-4">
                <span class="ms-3 text-sm font-medium text-gray-900">Retroceso</span>
                <label class="relative inline-flex items-center cursor-pointer">
                    <input id="direction-motor-btn" type="checkbox" value="" class="sr-only peer" onchange="handleChangeDirectionToggle(event)" checked>
                    <div class="w-11 h-6 bg-red-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-emerald-200"></div>
                </label>
                <span class="text-sm font-medium text-gray-900">Avance</span>
            </div>
        </div>
        <div class='border-t border-slate-400/20 px-4'>
            <h2 class='mt-4 mb-2 text-lg font-medium text-gray-600'>Gr√°fico:</h2>
            <div id='lwc'></div>
        </div>
    </div>
    <script src="https://unpkg.com/lightweight-charts@3.4.0/dist/lightweight-charts.standalone.production.js"></script>
    <script>
        const socket = new WebSocket('ws://localhost:4200')
        
        const node_name = window.location.pathname.replace('/node/', '')
        const nodeNameH1 = document.getElementById('node-name')
        nodeNameH1.innerText = node_name

        const nodeStatusBackground = document.getElementById('node-status-background')
        const nodeStatusPoint = document.getElementById('node-status')
        const motorStatus = document.getElementById('motor-status')
        const motorStatusBackground = document.getElementById('motor-status-background')
        const lwc = document.getElementById('lwc')
        const measureBtn = document.getElementById('measure-btn')

        let motorWorking = false
        let motorDirection = true   // true = avance, false = retroceso
        let nodeStatus = true
        let isMeasureActive = false
        const toolTipWidth = 80
        const toolTipHeight = 80
        const toolTipMargin = 15

        const chart = LightweightCharts.createChart(lwc, {
            height: 400,
            layout: {
            	textColor: '#d1d4dc',
            	backgroundColor: '#00000000'
            },
            rightPriceScale: {
            	scaleMargins: {
            		top: 0.3,
            		bottom: 0.25,
            	},
            },
            crosshair: {
            	vertLine: {
            		width: 5,
            		color: 'rgba(224, 227, 235, 0.1)',
            		style: 0,
            	},
            	horzLine: {
            		visible: false,
            		labelVisible: false,
            	},
            },
            grid: {
            	vertLines: {
            		color: 'rgba(42, 46, 57, 0)',
            	},
            	horzLines: {
            		color: 'rgba(42, 46, 57, 0)',
            	},
            },
        }) 

        const areaChart = chart.addAreaSeries({
            topColor: 'rgba(38, 198, 218, 0.56)',
            bottomColor: 'rgba(38, 198, 218, 0.04)',
            lineColor: 'rgba(38, 198, 218, 1)',
            lineWidth: 2,
            crossHairMarkerVisible: false,
        })

        areaChart.setData([])

        const toolTip = document.createElement('div')
        toolTip.style = `width: 96px; height: 80px; position: absolute; display: none; padding: 8px; box-sizing: border-box; font-size: 12px; text-align: left; z-index: 1000; top: 12px; left: 12px; pointer-events: none; border: 1px solid; border-radius: 2px;font-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', Roboto, Ubuntu, sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;`
        toolTip.style.background = 'rgba(38, 198, 218, 0.2)'
        toolTip.style.color = 'black'
        toolTip.style.borderColor = 'rgba(38, 198, 218, 1)'
        lwc.appendChild(toolTip)

        let startTime = null

        chart.subscribeCrosshairMove(param => {
            if (
                param.point === undefined ||
                !param.time ||
                param.point.x < 0 ||
                param.point.x > lwc.clientWidth ||
                param.point.y < 0 ||
                param.point.y > lwc.clientHeight
            ) {
                toolTip.style.display = 'none'
            } else {
                const dateStr = param.time
                if (!startTime) {
                    startTime = dateStr
                }
                const time = dateStr - startTime
                const seconds = Math.floor(time / 1000)
                const minutes = Math.floor(seconds / 60)

                const timeToShow = seconds < 60 ? `${seconds} sec` : `${minutes} min`

                toolTip.style.display = 'block'
                const value = param.seriesPrices.get(areaChart)
                toolTip.innerHTML = `<div style="color: ${'rgba(255, 82, 82, 1)'}">${'A0'}</div><div style="font-size: 24px; margin: 0px; color: ${'black'}">
                    ${value}
                    </div><div style="color: ${'black'}">
                    ${timeToShow}
                    </div>`

                const y = param.point.y + 272 // 272 is the offset of the chart
                let left = param.point.x + toolTipMargin
                if (left > lwc.clientWidth - toolTipWidth) {
                    left = param.point.x - toolTipMargin - toolTipWidth
                }

                let top
                // if (top - 272 > lwc.clientHeight - toolTipHeight) {
                //     top = y - toolTipHeight - toolTipMargin
                // }

                // console.log(y)
                // console.log(lwc.clientHeight - toolTipHeight)

                top = y - toolTipHeight - toolTipMargin
                toolTip.style.left = left + 'px'
                toolTip.style.top = top + 'px'
            }
        })

        const startMotorBtn = document.getElementById('start-motor-btn')
        const directionMotorBtn = document.getElementById('direction-motor-btn')
        const alert = document.getElementById('alert')

        const connectionTime = new Date().getTime()

        socket.onopen = () => {
            console.log('üéâ WS Connected')

            socket.send(JSON.stringify({ event: 'currentStateClient', data: node_name }))
        }

        socket.onmessage = (e) => {
            const msg = JSON.parse(e.data)

            const event = msg.event
            const data = msg.data
            const nodeName = msg?.nodeName
            const destination = msg?.destination

            if (event === 'type') {
                socket.send(JSON.stringify({ event: 'type', data: 'client' }))
            }

            if (destination && destination === 'client') {
                if (node_name === nodeName) {
                    if (event === 'initialState') {
                        if (data.motorStatus.toLowerCase() === 'true') {
                            motorWorking = true
                            startMotorBtn.checked = true
                            motorStatus.classList.remove('bg-red-500')
                            motorStatus.classList.add('bg-emerald-500')
                            motorStatusBackground.classList.remove('bg-red-200')
                            motorStatusBackground.classList.add('bg-emerald-200')
                        } else {
                            motorWorking = false
                            startMotorBtn.checked = false
                            motorStatus.classList.add('bg-red-500')
                            motorStatus.classList.remove('bg-emerald-500')
                            motorStatusBackground.classList.add('bg-red-200')
                            motorStatusBackground.classList.remove('bg-emerald-200')
                        }

                        if (data.motorDirection === 'clockwise') {
                            motorDirection = true
                            directionMotorBtn.checked = true
                        } else {
                            motorDirection = false
                            directionMotorBtn.checked = false
                        }
                    }

                    if (event === 'currentState') {
                        if (data.motorStatus.toLowerCase() === 'true') {
                            motorWorking = true
                            startMotorBtn.checked = true
                            motorStatus.classList.remove('bg-red-500')
                            motorStatus.classList.add('bg-emerald-500')
                            motorStatusBackground.classList.remove('bg-red-200')
                            motorStatusBackground.classList.add('bg-emerald-200')
                        } else {
                            motorWorking = false
                            startMotorBtn.checked = false
                            motorStatus.classList.add('bg-red-500')
                            motorStatus.classList.remove('bg-emerald-500')
                            motorStatusBackground.classList.add('bg-red-200')
                            motorStatusBackground.classList.remove('bg-emerald-200')
                        }

                        if (data.motorDirection === 'clockwise') {
                            motorDirection = true
                            directionMotorBtn.checked = true
                        } else {
                            motorDirection = false
                            directionMotorBtn.checked = false
                        }
                    }

                    if (event === 'continuous-data') {
                        if (!isNaN(data.value)) {
                            areaChart.update({
                                time: new Date().getTime() - connectionTime,
                                value: data.value
                            })
                        }
                    }
                }

                if (event === 'status') {
                    const nodeState = data.find(node => node.name === node_name)
                    nodeStatus = nodeState.status

                    nodeStatusIndicator(nodeState.status)
                }
            }

            if (node_name === nodeName) {
                if (event === 'startMotorNode') {
                    motorWorking = true
                    startMotorBtn.checked = true
                    motorStatus.classList.remove('bg-red-500')
                    motorStatus.classList.add('bg-emerald-500')
                    motorStatusBackground.classList.remove('bg-red-200')
                    motorStatusBackground.classList.add('bg-emerald-200')  

                    if (data === 'clockwise') {
                        motorDirection = true
                        directionMotorBtn.checked = true
                    } else {
                        motorDirection = false
                        directionMotorBtn.checked = false
                    }
                }

                if (event === 'stopMotorNode') {
                    motorWorking = false
                    startMotorBtn.checked = false
                    motorStatus.classList.add('bg-red-500')
                    motorStatus.classList.remove('bg-emerald-500')
                    motorStatusBackground.classList.add('bg-red-200')
                    motorStatusBackground.classList.remove('bg-emerald-200')
                }
            }
        }

        socket.onerror = (error) => {
            console.log('‚ùå WS Error: ', error)
            alert.classList.remove('hidden')
        }

        socket.onclose = (event) => {
            if (!event.wasClean) {
                console.log('üîå WS Closed: ', event)
                alert.classList.remove('hidden')
            }
        }

        const handleStartToggle = e => {
            if (e.target.checked) {
                motorWorking = true
                motorStatus.classList.remove('bg-red-500')
                motorStatus.classList.add('bg-emerald-500')
                motorStatusBackground.classList.remove('bg-red-200')
                motorStatusBackground.classList.add('bg-emerald-200')
                if (motorDirection) {
                    socket.send(JSON.stringify({ event: 'startMotor', data: 'clockwise', nodeName: node_name }))
                } else {
                    socket.send(JSON.stringify({ event: 'startMotor', data: 'anticlockwise', nodeName: node_name }))
                }
            } else {
                motorWorking = false
                socket.send(JSON.stringify({ event: 'stopMotor', nodeName: node_name }))
                motorStatus.classList.add('bg-red-500')
                motorStatus.classList.remove('bg-emerald-500')
                motorStatusBackground.classList.add('bg-red-200')
                motorStatusBackground.classList.remove('bg-emerald-200')
            }
        }

        const handleChangeDirectionToggle = e => {
            if (e.target.checked) {
                motorDirection = true
                if (motorWorking) socket.send(JSON.stringify({ event: 'startMotor', data: 'clockwise', nodeName: node_name }))
            } else {
                motorDirection = false
                if (motorWorking) socket.send(JSON.stringify({ event: 'startMotor', data: 'anticlockwise', nodeName: node_name }))
            }
        }

        measureBtn.addEventListener('click', () => {
            if (!isMeasureActive) {
                socket.send(`measure:true:${node_name}`)
                isMeasureActive = true
                measureBtn.innerHTML = 'Parar Medici√≥n'
            } else {
                socket.send(`measure:false:${node_name}`)
                isMeasureActive = false
                measureBtn.innerHTML = 'Empezar Medici√≥n'
            }
        })

        const nodeStatusIndicator = (status) => {
            nodeStatusBackground.classList.remove('bg-red-200')
            nodeStatusBackground.classList.remove('bg-emerald-200')
            nodeStatusBackground.classList.add(`bg-${status ? 'emerald' : 'red'}-200`)
            nodeStatusPoint.classList.remove('bg-red-500')
            nodeStatusPoint.classList.remove('bg-emerald-500')
            nodeStatusPoint.classList.add(`bg-${status ? 'emerald' : 'red'}-500`)
        }
    </script>
{{/layout}}
