{{#> layout}}
    <div id="container" class='px-20 py-10'>
        <div class='flex flex-row items-center gap-2 mb-6'>
            <div
                id='node-status-background'
                class='h-3.5 w-3.5 rounded-full bg-emerald-200 grid place-items-center'
            >
                <div
                    id='node-status'
                    class='w-2 h-2 rounded-full bg-emerald-500'
                ></div>
            </div>
            <h1 id='node-name' class='text-xl text-gray-800 capitalize'></h1>
        </div>
       <div>
            <div class='flex flex-row items-center mt-4 mb-2'>
                <h2 class='text-lg font-medium text-gray-600'>Motor</h2>
                <div class='ml-2' id='motor-status'>ðŸ”´</div>
            </div>
            <button onclick="clockwise()" class='px-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11'>Sentido Agujas Del Reloj</button>
            <button onclick="anticlockwise()" class='px-4 ml-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11'>Sentido Contrario Agujas Del Reloj</button>
            <button onclick="stopmotor()" class='px-4 ml-4 text-gray-600 bg-gray-200 rounded-md cursor-pointer h-11'>Parar Motor</button>
       </div>
            <h2 class='mt-4 mb-2 text-lg font-medium text-gray-600'>GrÃ¡fico:</h2>
            <div id='lwc'></div>
    </div>
    <script src="https://unpkg.com/lightweight-charts@3.4.0/dist/lightweight-charts.standalone.production.js"></script>
    <script>
        const node_name = window.location.pathname.replace('/node/', '')
        const nodeNameH1 = document.getElementById('node-name')
        nodeNameH1.innerText = node_name

        const nodeStatusBackground = document.getElementById('node-status-background')
        const nodeStatusPoint = document.getElementById('node-status')
        const motorStatus = document.getElementById('motor-status')

        let nodeStatus = true
        const chartData = []
        const shortChartData = []
        const maxDataPoints = 100

        const chart = LightweightCharts.createChart(document.getElementById('lwc'), {
            height: 400,
            layout: {
            	textColor: '#d1d4dc',
            	backgroundColor: '#00000000'
            },
            rightPriceScale: {
            	scaleMargins: {
            		top: 0.3,
            		bottom: 0.25,
            	},
            },
            crosshair: {
            	vertLine: {
            		width: 5,
            		color: 'rgba(224, 227, 235, 0.1)',
            		style: 0,
            	},
            	horzLine: {
            		visible: false,
            		labelVisible: false,
            	},
            },
            grid: {
            	vertLines: {
            		color: 'rgba(42, 46, 57, 0)',
            	},
            	horzLines: {
            		color: 'rgba(42, 46, 57, 0)',
            	},
            },
        }) 

        const areaChart = chart.addAreaSeries({
            topColor: 'rgba(38, 198, 218, 0.56)',
            bottomColor: 'rgba(38, 198, 218, 0.04)',
            //  lineColor: 'rgba(38, 198, 218, 1)',
            lineColor: '#eb4034',
            lineWidth: 2,
            crossHairMarkerVisible: false,
        })

        const socket = new WebSocket('ws://localhost:4200')

        socket.onopen = () => {
            console.log('ðŸŽ‰ WS Connected')
        }

        socket.onmessage = (e) => {
            const event = e.data.split(':')[0]
            const data = e.data.split(':')[1]
            const payload = e.data.substring(event.length + data.length + 2)

            if (event === 'type') {
                socket.send('type:client')
            }

            if (event === 'client') {
                const subevent = data
                if (subevent === 'status') {
                    const parsed = JSON.parse(payload)
                    if (Array.isArray(parsed)) {
                        parsed.forEach(node => {
                            // 'ðŸŸ¢' : 'ðŸ”´'
                            if (node.nodeName === node_name) {
                                nodeStatus = node.status
                                nodeStatusBackground.classList.remove('bg-red-200')
                                nodeStatusBackground.classList.remove('bg-emerald-200')
                                nodeStatusBackground.classList.add(`bg-${node.status ? 'emerald' : 'red'}-200`)
                                nodeStatusPoint.classList.remove('bg-red-500')
                                nodeStatusPoint.classList.remove('bg-emerald-500')
                                nodeStatusPoint.classList.add(`bg-${node.status ? 'emerald' : 'red'}-500`)
                            }
                        })
                    }
                }

                if (subevent === 'continuous-data') {
                    const analogValue = payload.split('/')[0]
                    const socket_id = payload.split('/')[1]
                    const value = parseFloat(analogValue)
                    if (!isNaN(value) && socket_id === node_name) {
                        if (shortChartData.length >= maxDataPoints) {
                            shortChartData.shift()
                        }
                        
                        areaChart.update({
                            time: new Date().getTime(),
                            value: value
                        })
                    }
                }
            }
        }
    </script>
{{/layout}}
