{{#> layout}}
    <nav class='flex flex-row items-center justify-between w-full h-20 px-5 md:px-20'>
        <img
            src='https://www.frsf.utn.edu.ar/templates/utn17/img/utnsantafe-color.png'
            class='h-5 md:h-10'
        />
        <a href="/measures">
            <span>
                Mediciones
            </span>
        </a>
    </nav>
    <main class='h-[calc(100vh-80px)] w-full px-5 md:px-20 py-10'>
        <div id="alert" class="hidden p-4 mb-4 text-sm text-red-800 bg-red-100 rounded-lg" role="alert">
            <span class="font-semibold">Alerta!</span> Conexion perdida con el servidor.
            <br/>
            <span>Por favor recargue la p√°gina</span>
        </div>
        <h1 class='mb-5 text-lg font-semibold'>Nodos en la red:</h1>
        <ul
            id='card-container'
            class='grid w-full grid-cols-2 gap-2 sm:grid-cols-4 md:grid-cols-6 2xl:grid-cols-9 xl:gap-6'
        ></ul>
    </main>
<script>
    const cardContainer = document.getElementById('card-container')
    const alert = document.getElementById('alert')

    const cardWidth = 180

    const setCardContainerGap = (winWidth) => {
        const cardsPerRow = Math.floor(winWidth / cardWidth)
        const gap = (winWidth - (cardsPerRow * cardWidth)) / (cardsPerRow - 1)

        cardContainer.style.gap = `${gap}px`
    }

    const windowWidth = window.innerWidth
    setCardContainerGap(windowWidth)

    window.addEventListener('resize', e => {
        const winWidth = e.target.innerWidth
        setCardContainerGap(winWidth)
    })

    const socket = new WebSocket('ws://localhost:4200')

    socket.onopen = () => {
        console.log('üéâ WS Connected')
    }

    socket.onmessage = (e) => {
        const msg = JSON.parse(e.data)

        if (msg.destination !== 'client') return

        const event = msg.event
        const data = msg.data
        const nodeName = msg.nodeName

        if (event === 'type') {
            socket.send(JSON.stringify({ event: 'type', data: 'client' }))
        }

        if (event === 'status') {
            cardContainer.innerHTML = ''
            if (data.length === 0) {
                cardContainer.innerHTML += `<span class='col-span-4 ml-4'>No hay nodos conectados</span>`
            } else {
                data.forEach(node => {
                    cardContainer.innerHTML += cardTemplate({ nodeName: node.name, status: node.status })
                })
            }
        }

        if (event === 'nodeLatency') {
            cardContainer.innerHTML = ''
            data.forEach(node => {
                cardContainer.innerHTML += cardTemplate({ nodeName: node.name, status: node.status, latency: node.latency })
            })
        }
    }

    socket.onerror = (error) => {
        console.log('‚ùå WS Error: ', error)
        alert.classList.remove('hidden')
    }

    socket.onclose = (event) => {
        if (!event.wasClean) {
            console.log('üîå WS Closed: ', event)
            alert.classList.remove('hidden')
        }
    }

    const cardTemplate = ({ nodeName, status, latency = null }) => (`
            <li
                class='w-full col-span-1 bg-white rounded-lg shadow-md cursor-pointer h-28'
            >
                <a href='${status ? `/node/${nodeName}` : '/'}' class='block w-full h-28'>
                    <div class='flex flex-col justify-between w-full h-full px-4 py-2'>
                        <div
                            class='flex flex-row items-center justify-between w-full'
                        >
                            <span
                                class='text-base text-gray-800'
                            >${nodeName}</span>
                            <div
                                class='h-3.5 w-3.5 rounded-full bg-${status ? 'emerald' : 'red'}-200 grid place-items-center'
                            >
                                <div
                                    class='h-2 w-2 rounded-full bg-${status ? 'emerald' : 'red'}-500'
                                ></div>
                            </div>
                        </div>
                        <div>
                            <span
                                class='block text-sm text-gray-700'
                            >latencia: ${latency}${latency === null ? '' : 'ms'}</span>
                        </div>
                    </div>
                </a>
            </li>
        `) 
    </script>
{{/layout}}
